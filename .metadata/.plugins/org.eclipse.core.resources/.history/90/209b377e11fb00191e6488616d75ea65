package com.hyconosys.bft.adb;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.hyconosys.bft.model.DeviceModel;
import com.hyconosys.bft.model.Status;

public class AdbCommunication {
	private static final Logger logger = LogManager.getLogger(AdbCommunication.class);

	public List<DeviceModel> getDeviceList() throws Exception {

		String cmd = "adb devices -l";
		BufferedReader input = null;
		try {
			Process p;
			logger.info("Executing adb command: " + cmd);
			p = Runtime.getRuntime().exec(cmd);
			p.waitFor();

			String line;
			String version;
			String[] params;
			BufferedReader err = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			while ((line = err.readLine()) != null) {
				logger.error("ADB error: " + line);
				Status.resetStatus();
				err.close();
				return null;
			}
			err.close();
			List<DeviceModel> deviceList = new ArrayList<DeviceModel>();
			input = new BufferedReader(new InputStreamReader(p.getInputStream()));
			while ((line = input.readLine()) != null) {
				logger.info("List of device: " + line);
				params = line.replaceAll("\\s{2,20}", " ").split(" ");
				if (line.indexOf("Offline") > 0) {
					deviceList.add(new DeviceModel(params[0], null, null, null, "Offline"));
					continue;
				}
				//logger.info("getting device status:" + params);
				if (line.indexOf("product") < 0)
					continue;
				// System.out.println(line);
				if (params.length < 5)
					continue;
				// deviceList.add(new DeviceModel(params[0], params[2].substring(8),
				// params[3].substring(6),
				// params[4].substring(7), "8.1.0","Ready"));
				deviceList.add(new DeviceModel(params[0], params[2].substring(8), params[3].substring(6),
						params[4].substring(7), "Ready"));

			}

			for (int i = 0; i < deviceList.size(); i++) {
				if (!"Ready".equals(deviceList.get(i).getDeviceStatus()))
					continue;
				//logger.info("Executing adb command: " + deviceList);
				p = Runtime.getRuntime()
						.exec("adb -s " + deviceList.get(i).getDeviceId() + " shell getprop ro.build.id");
				p.waitFor();
				input = new BufferedReader(new InputStreamReader(p.getInputStream()));
				version = (line = input.readLine()) != null ? line : "";
				int index = version.lastIndexOf("-") + 1;
				String operator = version.substring(index, index + 2);
				logger.info("getting Build info:" + version);
				deviceList.get(i).setBuildInfo(version);
				deviceList.get(i).setOperator(operator + " : " + Status.operator.get(operator));

			}

			return deviceList;
		} catch (Exception e) {
			logger.error(e);
			Status.resetStatus();
		} finally {
			input.close();
		}
		return null;
	}

	public boolean rebootEDL(String deviceId) {
		logger.info("Reboot in EDL mode");

		try {
			logger.info("Reboot in EDL mode:" + deviceId);
			Process p = Runtime.getRuntime().exec("adb -s " + deviceId + " reboot edl");
			p.waitFor();
			BufferedReader err = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
			String line;
			while ((line = err.readLine()) != null) {
				logger.error("ADB error: " + line);
				Status.resetStatus();
				err.close();
				return false;
			}

			while ((line = input.readLine()) != null) {
				if (line.equals("error: device offline")) {
					Status.MESSAGE = new StringBuffer(
							"Not able to comminicate with device! Please reconnect and try again");
					logger.info("Not able to communicate with device! Please rerconnect and try again:" + line);
				}

			}
		} catch (Exception e) {
			logger.error(e);
			Status.resetStatus();
			return false;
		}

		return true;
	}

	public String reboot(String deviceId) {
		logger.info("reboot process:" + deviceId);
		try {
			Process p = Runtime.getRuntime().exec("adb -s " + deviceId + " reboot");
			p.waitFor();
			

		} catch (Exception e) {// error: device offline
			logger.error(e);
			Status.resetStatus();
		}

		return null;
	}
	
	public String killADB() {
		logger.info("Restarting ADB server");
		try {
			Process p = Runtime.getRuntime().exec("adb kill-server");
			p.waitFor();
			p = Runtime.getRuntime().exec("adb start-server");
			p.waitFor();
		} catch (Exception e) {// error: device offline
			logger.error(e);
			Status.resetStatus();
		}

		return null;
	}

	// adb -s 903290f3 wait-for-device logcat | findstr "Displayed
	// com.google.android.setupwizard/.user.WelcomeActivity"
	public boolean checkDeciveReady(String deviceId) {
		try {
			String cmd = "adb -s " + deviceId
					+ " wait-for-device logcat | findstr \"Displayed com.google.android.setupwizard/.user.WelcomeActivity\"";
			logger.info("Checking :" + deviceId + "  " + cmd);
			Process p = Runtime.getRuntime().exec(cmd);
			p.waitFor();
			logger.info("Ready :" + deviceId);

			return true;

		} catch (Exception e) {
			logger.error(e);
			Status.resetStatus();
		}

		return false;
	}

	public int checkDevice(String id) throws Exception {
		String cmd = "adb devices";
		BufferedReader input = null;
		try {
			Process p;
			logger.info("Check for device: " + id);
			logger.info(cmd);
			p = Runtime.getRuntime().exec(cmd);
			p.waitFor();

			String line;
			BufferedReader err = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			while ((line = err.readLine()) != null) {
				logger.error("error: " + line);
				Status.resetStatus();
				return 0;
			}
			err.close();
			input = new BufferedReader(new InputStreamReader(p.getInputStream()));
			logger.info(line);
			while ((line = input.readLine()) != null) {
				line = line.replaceAll("	", " ");
				logger.info("read device id: " + line);
				if ((id + " device").equals(line))
					return 1;
				else if (line.indexOf(id) > -1 && line.indexOf("Offline") > 0)
					return 2;
				{

				}
			}
		} catch (Exception e) {
			logger.error(e);
			Status.resetStatus();
		} finally {
			if (input != null)
				input.close();
		}
		return 0;
	}
}
