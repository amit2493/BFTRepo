package com.hyconosys.bft.automation;

import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.logging.LogEntries;
import org.openqa.selenium.remote.DesiredCapabilities;

import com.google.common.collect.ImmutableMap;
import com.hyconosys.bft.adb.AdbCommunication;
import com.hyconosys.bft.model.Status;
import com.hyconosys.bft.restCall.ApiCall;

import io.appium.java_client.AppiumDriver;
import io.appium.java_client.MobileElement;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.service.local.AppiumDriverLocalService;
import io.appium.java_client.service.local.AppiumServiceBuilder;
import io.appium.java_client.service.local.flags.GeneralServerFlag;

public class SetupAutomation extends Thread {
	private static final Logger logger = LogManager.getLogger(SetupAutomation.class);
	private String deviceName;
	private String deviceId;
	private int deviceIndex;
	private String androidVersion;
	private String appuimIP;
	private String appiumPort;
	private String wifiName;
	private String wifiPwd;
	private String gmailId;
	private String gmailPwd;
	AppiumServiceBuilder builder;
	DesiredCapabilities caps;
	DesiredCapabilities serviceCaps;
	AppiumDriver<MobileElement> driver = null;
	AppiumDriverLocalService service = null;
	List<String> script;
	Map<String, Object> command;
	List<MobileElement> li;
	LocalDateTime current;
	DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");

	public SetupAutomation(String deviceName, String deviceId, String androidVersion, String appuimIP,
			String appiumPort, String wifiName, String wifiPwd, String gmailId, String gmailPwd, int deviceIndex) {
		this.deviceName = deviceName;
		this.deviceId = deviceId;
		this.androidVersion = androidVersion;
		this.appuimIP = appuimIP;
		this.appiumPort = appiumPort;
		this.wifiName = wifiName;
		this.wifiPwd = wifiPwd;
		this.gmailId = gmailId;
		this.gmailPwd = gmailPwd;
		this.deviceIndex = deviceIndex;

	}

	public void run() {
		try {
			ApiCall api = new ApiCall();
			logger.info("Set up Appium server");
			serviceCaps = new DesiredCapabilities();
			serviceCaps.setCapability("noReset", "false");
			logger.info("Set Capability: noReset and false ");

			builder = new AppiumServiceBuilder();
			builder.withIPAddress(appuimIP);
			logger.info("AppiumIP Address");
			builder.usingPort(Integer.valueOf(appiumPort));
			builder.withCapabilities(serviceCaps);
			builder.withArgument(GeneralServerFlag.SESSION_OVERRIDE);
			builder.withArgument(GeneralServerFlag.RELAXED_SECURITY);
			builder.withArgument(GeneralServerFlag.LOG_LEVEL, "error");
			builder.withArgument(GeneralServerFlag.ROBOT_PORT, this.appiumPort);
			

			// Start the server with the builder
			service = AppiumDriverLocalService.buildService(builder);

			if (!service.isRunning())
				logger.info("Appium server is running");
				service.start();
			logger.info("Appium server started");
			logger.info("Preparing Device : "+this.deviceId);
			if (!this.prepareDevice()) {
				logger.info("Device preparation failed with device id: "+this.deviceId+". Exiting from process");
				Status.resetStatus();
				return;
			}
			long device1Time = System.currentTimeMillis();
			//logger.info("Device : "+this.deviceId+" setup process completed.");
			this.deviceId = Status.DEVICE2_ID.toString();
			this.deviceIndex = Status.DEVICE2;
			logger.info("Preparing Device : "+this.deviceId);
			if (!this.prepareDevice()) {
				logger.info("Device preparation failed with device id: "+this.deviceId+". Exiting from process");
				Status.resetStatus();
				return;
			}
			long device2Time = System.currentTimeMillis();
			
			long diff=(device2Time-device1Time)/1000;
			if(diff<180)
				Thread.sleep(1000 * (180-diff));
			this.deviceId = Status.DEVICE1_ID.toString();
			this.deviceIndex = Status.DEVICE1;
			Status.MESSAGE = new StringBuffer("Creating gmail : " + this.deviceId);
			logger.info("Set-up gmail process started, Device :" + deviceId);
			for (int i = 1; i < 4; i++) {
				if (this.gmailSetup())
					break;
				else if (i == 3) {
					logger.info("Not able to perform task,Stopped set-up wizard process.Device :" + deviceId);
					Status.resetStatus();
					return;
				}
				logger.info("Pass " + i + " retrying......, Device :" + deviceId);
				Thread.sleep(1000 * 20);
			}
			logger.info("Set-up gmail process completed. Device :" + deviceId);
			Status.deviceList.get(deviceIndex).setDeviceStatus("Set-up Completed");
			logger.info("Set-up process completed with device : " + deviceId);
			
			diff=(System.currentTimeMillis()-device2Time)/1000;
			if(diff<180)
				Thread.sleep(1000 * (180-diff));
			
			this.deviceId = Status.DEVICE2_ID.toString();
			this.deviceIndex = Status.DEVICE2;
			Status.MESSAGE = new StringBuffer("Creating gmail : " + this.deviceId);
			logger.info("Setup gmail process started, Device :" + deviceId);
			for (int i = 1; i < 4; i++) {
				if (this.gmailSetup())
					break;
				else if (i == 3) {
					logger.info("Not able to perform task,Stopped set-up wizard process. Device :" + deviceId);
					Status.resetStatus();
					return;
				}
				logger.info("Pass " + i + " retrying......, Device :" + deviceId);
				Thread.sleep(1000 * 20);
			}
			logger.info("Set-up gmail process completed. Device :" + deviceId);
			Status.deviceList.get(deviceIndex).setDeviceStatus("Setup Completed");
			logger.info("Set-up process completed with device : " + deviceId);
			
			
			
			logger.info("Device : "+this.deviceId+" set-up process completed ");
			current = LocalDateTime.now();
			Status.END_TIME = current.format(format);
			api.updateStatus("success", "Setting up preconditions", 40);
			service.stop();
			logger.info("Appium server service stopped");
			AdbCommunication adb = new AdbCommunication();
			logger.info("restarting device: " + Status.DEVICE1_ID);
			adb.reboot(Status.DEVICE1_ID.toString());
			logger.info("restarting device: " + Status.DEVICE2_ID);
			adb.reboot(Status.DEVICE2_ID.toString());
			Thread.sleep(1000 * 10);
			adb.killADB();
			Thread.sleep(1000 * 80);
			current = LocalDateTime.now();
			Status.END_TIME = current.format(format);
			logger.info("Success", "Test start", 41);
			api.updateStatus("Success", "Test start", 41);
			TestAutomation automation = new TestAutomation();
			automation.start();

		} catch (Exception e) {
			service.stop();
			logger.info(e);
			Status.resetStatus();
		} finally {
			logger.info("Appium server service stoped");
		}
	}

	public boolean prepareDevice() {
		try {
			Status.MESSAGE = new StringBuffer("Starting set-up with device " + this.deviceId);
			logger.info("Starting set-up process with device :" + deviceId);
			for (int i = 1; i < 7; i++) {
				if (this.deviceSetup())
					break;
				else if (i == 6) {
					logger.info("Not able to perform task,Stopped set-up wizard process. Device :" + deviceId);
					return false;
				}
				logger.info("Opening communication channel. Pass " + i + " retrying......, Device :" + deviceId);
				Thread.sleep(1000 * 30);
			}
			logger.info("Completed set-up process with device :" + deviceId);
			Thread.sleep(1000 * 10);
			Status.MESSAGE = new StringBuffer("Updating settings and permissions : " + this.deviceId);
			logger.info("Updating settings and permissions, Device :" + deviceId);
			for (int i = 1; i < 4; i++) {
				if (this.updateSettings())
					break;
				else if (i == 3) {
					logger.info("Not able to perform task, Stopped set-up wizard process. Device :" + deviceId);
					return false;
				}
				logger.info("Pass" + i + " retrying......, Device :" + deviceId);
				Thread.sleep(1000 * 20);
			}
			logger.info("Setting updates process completed. Device :" + deviceId);
			

		} catch (Exception e) {
			// TODO Auto-generated catch block
			logger.info("Exception occured. Device :" + deviceId);
			logger.error(e);
			Status.resetStatus();
			return false;
		}
		return true;
	}

	public boolean deviceSetup() {
		caps = new DesiredCapabilities();
		logger.info("Device set-up process started");
		try {
			logger.info("set capability:deviceName +deviceId +platformName +platformVersion +appPackage +appActivity");
			caps.setCapability("deviceName", this.deviceName);
			caps.setCapability("udid", this.deviceId); // Give Device ID of your mobile phone
			caps.setCapability("platformName", "Android");
			caps.setCapability("platformVersion", this.androidVersion);
			caps.setCapability("appPackage", "com.google.android.setupwizard");
			caps.setCapability("appActivity", "SetupWizardActivity");
			caps.setCapability("noReset", "true");

			// Instantiate Appium Driver
			driver = new AndroidDriver<MobileElement>(new URL("http://" + appuimIP + ":" + appiumPort + "/wd/hub"),
					caps);
			
			logger.info("Started set-up process");
			// Language selection
			logger.info("Click on Language selection option");
			this.clickIfExist("com.google.android.setupwizard:id/start", 2);
			// Network skip - in case of no SIM card
			logger.info("Click on Network skip option in case of no SIM card available");
			this.clickIfExist("com.google.android.setupwizard:id/skip_button", 2);
			// Set up as new
			logger.info("Click on Set up  as new");
			this.clickIfExist("com.google.android.setupwizard:id/flow_choice_new", 2);
			// WiFi Skip & //Continue
			logger.info("Click on skip WIFi And click on continue button");
			if (this.clickIfExist("com.google.android.setupwizard:id/skip_button", 3))
				this.clickIfExist("android:id/button1", 1);
			// date time next button
			logger.info("Click on select Date and Time");
			this.clickIfExist("com.google.android.setupwizard:id/next_button", 4);
			// name next button
			logger.info("Click on Next button");
			this.clickIfExist("com.google.android.setupwizard:id/next_button", 2);
			// Skip fingerprint
			logger.info("Click on Skip fingerprint button");
			this.clickIfExist("com.android.settings:id/fingerprint_cancel_button", 2);
			// Not now -Protect your phone & Skip anyway
			logger.info(" Click on Not now : protect your phone and skip anyway");
			if (this.clickByClassAndText("android.widget.TextView", "Not now", 2))
				this.clickIfExist("android:id/button1", 1);
			// Tap More
			logger.info("execute script: shell command");
			Thread.sleep(1000 * 5);
			script = Arrays.asList("tap", "760 1745");
			command = ImmutableMap.of("command", "input", "args", script);
			driver.executeScript("mobile: shell", command);
			// Tap More
			logger.info("Click on More button");
			driver.executeScript("mobile: shell", command);
			// Tap Accept
			logger.info("Click on Accept button");
			driver.executeScript("mobile: shell", command);
			// tap no thanks
			logger.info("Click on no thanks button");
			this.clickIfExist("com.google.android.setupwizard:id/skip_button", 2);
			// Tap Next
			logger.info("Click on next button");
			Thread.sleep(1000 * 2);
			script = Arrays.asList("tap", "760 1755");
			command = ImmutableMap.of("command", "input", "args", script);
			driver.executeScript("mobile: shell", command);

		} catch (Exception e) {
			//Status.resetStatus();
			// logger.info(e.getMessage());
			// e.printStackTrace();
			return false;
		} finally {
			// driver.quit();
		}
		return true;
	}

	public boolean updateSettings() {
		caps = new DesiredCapabilities();
		logger.info("Update settings process started");
		try {
			caps.setCapability("deviceName", this.deviceName);
			caps.setCapability("udid", this.deviceId); // Give Device ID of your mobile phone
			caps.setCapability("platformName", "Android");
			caps.setCapability("platformVersion", this.androidVersion);
			caps.setCapability("appPackage", "com.android.settings");
			caps.setCapability("appActivity", ".Settings");
			caps.setCapability("noReset", "true");

			// Instantiate Appium Driver
			driver = new AndroidDriver<MobileElement>(new URL("http://" + appuimIP + ":" + appiumPort + "/wd/hub"),
					caps);
			logger.info("Initiate Appium Driver");
			// select Security
			Thread.sleep(1000 * 5);
			logger.info("Select Security:Execute script shell command");
			script = Arrays.asList("start", "-a android.settings.SECURITY_SETTINGS");
			command = ImmutableMap.of("command", "am", "args", script);
			driver.executeScript("mobile: shell", command);
			// select screen lock
			logger.info("Select index of screen lock");
			this.clickByClassAndText("android.widget.TextView", "Screen lock", 2);
			// select none
			logger.info("Select none option");
			li = driver.findElementsByClassName("android.widget.TextView");
			li.get(1).click();
			Thread.sleep(1000 * 5);
			script = Arrays.asList("keyevent", "KEYCODE_HOME");
			command = ImmutableMap.of("command", "input", "args", script);
			driver.executeScript("mobile: shell", command);

			// Set gmail storage permision adb -s 903290c3 shell pm grant
			// com.google.android.gm android.permission.WRITE_EXTERNAL_STORAGE
			logger.info("Set gmail storage permission process: using adb shell command");
			Thread.sleep(1000 * 3);
			script = Arrays.asList("grant", "com.google.android.gm android.permission.WRITE_EXTERNAL_STORAGE");
			command = ImmutableMap.of("command", "pm", "args", script);
			driver.executeScript("mobile: shell", command);

			Thread.sleep(1000 * 2);
			script = Arrays.asList("start", "-a android.settings.WIFI_SETTINGS");
			command = ImmutableMap.of("command", "am", "args", script);
			driver.executeScript("mobile: shell", command);

			// Tap Storage
			logger.info("Size storage");
			this.clickByClassAndText("android.widget.TextView", this.wifiName, 2);
			driver.findElementById("com.android.settings:id/password").setValue(this.wifiPwd);
			this.clickIfExist("android:id/button1", 1);

			logger.info("Select screen off time to 30 minutes"); 
			Thread.sleep(1000 * 1);
			script = Arrays.asList("put", "system", "screen_off_timeout", "1800000");
			command = ImmutableMap.of("command", "settings", "args", script);
			driver.executeScript("mobile: shell", command);

			// Back to Home
			logger.info("Back to Home Menu");
			Thread.sleep(1000 * 3);
			script = Arrays.asList("keyevent", "KEYCODE_HOME");
			command = ImmutableMap.of("command", "input", "args", script);
			driver.executeScript("mobile: shell", command);

			Thread.sleep(1000 * 2);

		} catch (Exception e) {
			// logger.info(e.getMessage());
			//Status.resetStatus();
			return false;
		} finally {
			// driver.quit();
		}
		return true;
	}

	public boolean gmailSetup() {
		caps = new DesiredCapabilities();
		logger.info("Gmail set up process started");
		try {
			caps.setCapability("deviceName", this.deviceName);
			caps.setCapability("udid", this.deviceId); // Give Device ID of your mobile phone
			caps.setCapability("platformName", "Android");
			caps.setCapability("automationName", "UiAutomator1");
			caps.setCapability("platformVersion", this.androidVersion);
			caps.setCapability("appPackage", "com.google.android.gm");
			caps.setCapability("appActivity", ".ui.MailActivityGmail");
			caps.setCapability("noReset", "true");
			driver = new AndroidDriver<MobileElement>(new URL("http://" + appuimIP + ":" + appiumPort + "/wd/hub"),
					caps);
			Thread.sleep(1000 * 5);
			logger.info("Find element by adding Id attribute on page");
			driver.findElementById("com.google.android.gm:id/welcome_tour_got_it").click();
			Thread.sleep(1000 * 10);
			driver.findElementById("com.google.android.gm:id/setup_addresses_add_another").click();
			// Tap Google
			Thread.sleep(1000 * 10);
			logger.info("Click on Google option: find element by using class name attribute");
			li = driver.findElementsByClassName("android.widget.TextView");
			li.get(1).click();
			// for (MobileElement e: li) {
			// logger.info(e.getText());
			// if (e.getText().toString().indexOf("Google")>-1) {
			// e.click();
			// break;
			// }
			// return;
			// }
			Thread.sleep(1000 * 20);
			driver.findElementById("identifierId").setValue(this.gmailId);
			driver.findElementById("identifierNext").click();
			Thread.sleep(1000 * 10);
			driver.findElementByClassName("android.widget.EditText").setValue(this.gmailPwd);
			// Password next button
			logger.info("Click on Password next button");
			driver.findElementById("passwordNext").click();
			Thread.sleep(1000 * 10);
			// I agreee
			logger.info("Click on I agree button");
			driver.findElementById("signinconsentNext").click();
			Thread.sleep(1000 * 10);
			// More Button
			logger.info("Click on More button");
			driver.findElementByClassName("android.widget.Button").click();
			Thread.sleep(1000 * 10);
			// Accept Button
			logger.info("Click on Accept button");
			driver.findElementByClassName("android.widget.Button").click();
			// Take me to gmail
			logger.info("Click on Take me to gmail");
			Thread.sleep(1000 * 10);
			driver.findElementById("com.google.android.gm:id/action_done").click();
			// Back to Home
			logger.info("Back to home Menu");
			Thread.sleep(1000 * 5);
			script = Arrays.asList("keyevent", "KEYCODE_HOME");
			command = ImmutableMap.of("command", "input", "args", script);
			driver.executeScript("mobile: shell", command);

		} catch (Exception e) {
			// e.printStackTrace();
			//Status.resetStatus();
			return false;
		} finally {
			// driver.quit();
		}
		return true;
	}

	public boolean stopAppsAutoupdate() {
		caps = new DesiredCapabilities();
		try {
			logger.info("Disable Apps Auto Updates Process");
			caps.setCapability("deviceName", this.deviceName);
			caps.setCapability("udid", this.deviceId); // Give Device ID of your mobile phone
			caps.setCapability("platformName", "Android");
			caps.setCapability("platformVersion", this.androidVersion);
			caps.setCapability("appPackage", "com.android.vending");
			caps.setCapability("appActivity", "com.google.android.finsky.activities.MainActivity");
			caps.setCapability("noReset", "true");
			driver = new AndroidDriver<MobileElement>(new URL("http://" + appuimIP + ":" + appiumPort + "/wd/hub"),
					caps);
			Thread.sleep(1000 * 5);
			driver.findElementById("com.android.vending:id/main_nav_item").click();
			// Tap Settings
			Thread.sleep(1000 * 2);
			li = driver.findElementsByClassName("android.widget.TextView");
			logger.info("Click on settings: find element by using class name attribute");
			for (int i = 0; i < li.size(); i++) {
				if (li.get(i).getText().toString().equals("Settings")) {
					li.get(i).click();
					break;
				}
				if (i == li.size() - 1)
					return false;
			}
			Thread.sleep(1000 * 10);
			// Auto-update apps
			logger.info("Auto Updates Apps Activation");
			li = driver.findElementsByClassName("android.widget.TextView");
			for (int i = 0; i < li.size(); i++) {
				if (li.get(i).getText().toString().equals("Auto-update apps")) {
					li.get(i).click();
					break;
				}
				if (i == li.size() - 1)
					return false;
			}
			// tap Don't auto-update apps

			Thread.sleep(1000 * 2);
			logger.info("Disable Auto Update Apps");
			driver.findElementById("com.android.vending:id/auto_update_settings_never").click();

			// tap done
			logger.info("click on done button");
			Thread.sleep(1000 * 2);
			driver.findElementById("android:id/button1").click();
			// Back to Home
			logger.info("Back to Home Menu");
			Thread.sleep(1000 * 2);
			script = Arrays.asList("keyevent", "KEYCODE_HOME");
			command = ImmutableMap.of("command", "input", "args", script);
			driver.executeScript("mobile: shell", command);

			Thread.sleep(1000 * 2);

		} catch (Exception e) {
			// logger.info(e.getMessage());
			Status.resetStatus();
			return false;
		} finally {
			// driver.quit();
		}
		return true;
	}

	public String startAppium() {
		logger.info("Start Appium server");
		return "Started";

	}

	private boolean clickIfExist(String elementId, int waitTime) {
		try {
			logger.info(elementId + "   searching element , Device :" + deviceId);
			Thread.sleep(1000 * waitTime);
			if (driver.findElements(By.id(elementId)).isEmpty()) {
				logger.info(elementId + "   not found, Device :" + deviceId);
				return false;
			}
			driver.findElementById(elementId).click();
			logger.info(elementId + "   clicked, Device :" + deviceId);
			return true;

		} catch (Exception e) {
			// TODO Auto-generated catch block
			logger.error(e);
		}
		return false;
	}

	private boolean clickByClassAndText(String className, String text, int waitTime) {
		try {
			Thread.sleep(1000 * waitTime);
			// if(driver.findElements(By.linkText(text)).isEmpty())
			// return false;
			// driver.findElementByLinkText(text).click();
			// return true;
			logger.info(className + ": searching element with class name, Device :" + deviceId);
			li = driver.findElementsByClassName(className);
			for (int i = 0; i < li.size(); i++) {
				if (li.get(i).getText().toString().equals(text)) {
					li.get(i).click();
					logger.info(text + ": clicked, Device :" + deviceId);
					return true;
				}
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			logger.info(e);
		}
		return false;
	}

}
