package com.hyconosys.bft.ftp;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import org.apache.commons.net.PrintCommandListener;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPReply;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.hyconosys.bft.adb.AdbCommunication;
import com.hyconosys.bft.automation.FlashingAutomation;
import com.hyconosys.bft.compress.TAR;
import com.hyconosys.bft.model.Status;
import com.hyconosys.bft.restCall.ApiCall;

public class FTPFunctions extends Thread {
	private static final Logger logger = LogManager.getLogger(FTPFunctions.class);

	public FTPFunctions() {
	}

	// Creating FTP Client instance
	FTPClient ftp = null;
	private static final int BUFFER_SIZE = 4096;

	private String source;
	private String binaryName;
	private String buildPath;
	LocalDateTime current;
	DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
	ApiCall api = new ApiCall();

	// Constructor to connect to the FTP Server
	public FTPFunctions(String host, int port, String username, String password, String source, String binaryName,
			String buildPath) throws Exception {

		ftp = new FTPClient();
		ftp.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out)));
		int reply;
		ftp.connect(host, port);
		logger.info("FTP URL is:" + ftp.getDefaultPort());
		reply = ftp.getReplyCode();
		if (!FTPReply.isPositiveCompletion(reply)) {
			ftp.disconnect();
			Status.resetStatus();
			logger.error("Exception in connecting to FTP Server");
			throw new Exception("Exception in connecting to FTP Server");
		}
		ftp.login(username, password);
		ftp.setFileType(FTP.BINARY_FILE_TYPE);
		ftp.enterLocalPassiveMode();
		this.source = source;
		this.binaryName = binaryName;
		this.buildPath = buildPath;
	}

	public FTPFunctions(String host, int port, String username, String password) throws Exception {

		ftp = new FTPClient();
		ftp.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out)));
		int reply;
		ftp.connect(host, port);
		logger.info("FTP URL is:" + ftp.getDefaultPort());
		reply = ftp.getReplyCode();
		if (!FTPReply.isPositiveCompletion(reply)) {
			ftp.disconnect();
			Status.resetStatus();

			logger.error("Exception in connecting to FTP Server");
			throw new Exception("Exception in connecting to FTP Server");
		}
		ftp.login(username, password);
		ftp.setFileType(FTP.BINARY_FILE_TYPE);
		ftp.enterLocalPassiveMode();
	}

	// Method to upload the File on the FTP Server
	public void upload(String localFileFullName, String fileName, String hostDir) throws Exception {
		try {
			InputStream input = new FileInputStream(new File(localFileFullName));

			this.ftp.storeFile(hostDir + fileName, input);

		}

		catch (Exception e) {
			logger.error(e);
			Status.resetStatus();
		}
	}

	// Method to download the File on the FTP Server
	public void run() {
		try {
			long startTime = System.currentTimeMillis();
			FTPFile file = ftp.mlistFile(source);
			Long fileSize = file.getSize();
			logger.info("Total file size" + fileSize / 1024);
			InputStream inputStream = ftp.retrieveFileStream(source);
			FileOutputStream outputStream = new FileOutputStream(buildPath + binaryName);
			byte[] buffer = new byte[BUFFER_SIZE];
			int bytesRead = -1;
			Long totalBytesRead = 0L;
			while ((bytesRead = inputStream.read(buffer)) != -1) {
				outputStream.write(buffer, 0, bytesRead);
				totalBytesRead += bytesRead;
				DecimalFormat format = new DecimalFormat("#0.###");
				logger.info("Doiwnload is in progress");
				Status.MESSAGE = new StringBuffer(
						"Download in progress. File Name:" + file.getName() + " [Downloaded : " + totalBytesRead + "/"
								+ fileSize + " : " + format.format((double) totalBytesRead / fileSize * 100) + "% ]");
				// logger.info(Status.MESSAGE) ;
			}
			long endTime = System.currentTimeMillis();
			logger.info("File downloaded");
			Status.MESSAGE = new StringBuffer("Download time in sec. is:-" + (endTime - startTime) / 1000);
			outputStream.close();
			inputStream.close();
			File downlodedFile = new File(buildPath + binaryName);
			if (!downlodedFile.exists() || !downlodedFile.isFile()) {
				Status.resetStatus();
				Status.MESSAGE = new StringBuffer("Download failed, Please try again");
				logger.info("Downloaded file is not proper" + "download failed");
				return;
			} else if (downlodedFile.length() != fileSize) {
				Status.MESSAGE = new StringBuffer("Download failed, Please try again");
				logger.info("Downloaded file is not proper" + "Please try again");
				downlodedFile.delete();
				return;
			}
			ApiCall api = new ApiCall();
			api.updateStatus("success", "Download complete", 20);
			logger.info(Status.MESSAGE);
			Status.MESSAGE = new StringBuffer("File unzip process started");
			logger.info(Status.MESSAGE);
			// TAR.decompress(buildPath+binaryName, new File(buildPath));
			TAR.unTar(buildPath + binaryName, buildPath);
			Status.MESSAGE = new StringBuffer("File unzip process completed");
			logger.info(Status.MESSAGE);
			AdbCommunication adb = new AdbCommunication();
			adb.rebootEDL(Status.DEVICE1_ID.toString());
			Status.deviceList.get(Status.DEVICE1).setDeviceStatus("In EDL Mode");
			adb.rebootEDL(Status.DEVICE2_ID.toString());
			Status.deviceList.get(Status.DEVICE2).setDeviceStatus("In EDL Mode");
			Status.MESSAGE = new StringBuffer("Starting flashing");
			logger.info(Status.MESSAGE);
			logger.info(buildPath + "/" + binaryName.replaceAll(".tar.gz", ""));
			FlashingAutomation automation = new FlashingAutomation(binaryName.replaceAll(".tar.gz", ""), buildPath);
			automation.start();

		} catch (Exception e) {
			logger.error(e);
			Status.resetStatus();
			// TODO: handle exception
		}
	}

	// list the files in a specified directory on the FTP
	public boolean listFTPFiles(String directory, String fileName) throws IOException {
		// lists files and directories in the current working directory
		boolean verificationFilename = false;
		FTPFile[] files = ftp.listFiles(directory);
		for (FTPFile file : files) {
			String details = file.getName();
			logger.info(details);
			if (details.equals(fileName)) {
				logger.info("Correct Filename");
				verificationFilename = details.equals(fileName);
				// assertTrue("Verification Failed: The filename is not updated at the CDN
				// end.",details.equals(fileName));
			}
		}

		return verificationFilename;
	}

	// Disconnect the connection to FTP
	public void disconnect() {
		if (this.ftp.isConnected()) {
			try {
				this.ftp.logout();
				this.ftp.disconnect();

			} catch (IOException f) {
				Status.resetStatus();
				// do nothing as file is already saved to server
			}
		}
	}

}